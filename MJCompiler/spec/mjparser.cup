

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, BOOL, NEW, ELSE, IF, DOT, LCURLY;
terminal ASSIGN, MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, CHAR, PRINT, FOREACH, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program, Declaration, ConstDecl, VarDecl, ClassDecl;
nonterminal Type;
nonterminal SingleConstDecl;
nonterminal MultipleConstDecl;
nonterminal SingleVarDecl;
nonterminal Brackets;
nonterminal MultipleVarDecl;

nonterminal MethodDecl;
nonterminal MethodFormPars;
nonterminal MethodStatement;
nonterminal MultipleMethodDecl;

nonterminal FormPars;
nonterminal SingleFormPar;
nonterminal MultipleFormPar;

nonterminal Statement;

nonterminal Expr;
nonterminal Term;
nonterminal Factor;
nonterminal FactParam;
nonterminal ActPars;

nonterminal Designator;

nonterminal Label;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;


Program ::= (Program) PROG IDENT Declaration LCURLY MethodDecl RCURLY;

Declaration ::= (ConstDeclaration) Declaration ConstDecl
			|
			(VarDeclaration) Declaration VarDecl
			|
			(ClassDeclaration) Declaration ClassDecl
			|
			(NoDeclaration) /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl MultipleConstDecl SEMICOLON;

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl COMMA SingleConstDecl
					|
					(EndOfDeclaration) /* epsilon */
					;					

VarDecl ::= (VarDecl) Type:varName SingleVarDecl MultipleVarDecl SEMICOLON;

SingleVarDecl ::= (SingleVarDecl) IDENT:varName Brackets;

Brackets ::= (Brackets) LSQUARE RSQUARE
			|
			(NoBrackets) /*epsilon*/
			;
			
MultipleVarDecl ::= (MultipleVarDecls) MultipleVarDecl COMMA SingleVarDecl
				|
				(EndOfVarDeclaration) /* epsilon */
				;
				
ClassDecl ::= (ClassDecl) AND;

MethodDecl ::= (MethodDecls) MethodDecl MultipleMethodDecl
				|
				(NoMethodDeclList) /*epsilon*/
				;

MultipleMethodDecl ::= (TypeMethodDecl) Type:methodType IDENT:methodName LPAREN MethodFormPars RPAREN VarDecl LCURLY MethodStatement RCURLY
					|
					(VoidMethodDecl) VOID IDENT:methodName LPAREN MethodFormPars RPAREN VarDecl LCURLY MethodStatement RCURLY
					;
					
MethodFormPars ::= (MethodFormParams) FormPars
				|
				(NoMethodFormParams) /* epsilon */
				;
				
MethodStatement ::= (MethodStmt) MethodStatement Statement
				|
				(NoMethodStmt) /* epsilon */
				;

FormPars ::= (FormPars) SingleFormPar MultipleFormPar;

SingleFormPar ::= (SingleFormParam) Type:formType IDENT:formName Brackets;

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar COMMA SingleFormPar
				|
				(EndOfFormPar) /*epsilon*/
				;
				
Statement ::= (DesignStmt) Designator SEMICOLON
			|
			(BreakStmt) BREAK SEMICOLON
			|
			(ContinueStmt) CONTINUE SEMICOLON
			|
			(ReturnNoExpr) RETURN SEMICOLON
			|
			(ReturnExpr) RETURN Expr SEMICOLON
			;

Expr ::= (NegativeExpr) MINUS Term
		|
		(MultipleExpr) Expr Addop Term
		|
		(SingleExpr) Term
		;
		
Term ::= (SingleTerm) Factor
		|
		(MultipleTerms) Term Mulop Factor
		;

Factor ::= (FactVar) Designator
		|
		(FactFunc) Designator LPAREN FactParam RPAREN 
		|
		(FactNum) NUMBER
		|
		(FactChar) CHAR
		|
		(FactBoolean) BOOL
		|
		(FactConstrArray) NEW Type:arrayType LSQUARE Expr RSQUARE
		|
		(FactConstrObject) NEW Type:objectType LPAREN FactParam RPAREN
		|
		(FactExpr) LPAREN Expr RPAREN
		;
		
FactParam ::= (FactFuncParams) ActPars
				|
				(NoFactFuncParams) /* epsilon */
				;
				
ActPars ::= (ActParams) ActPars COMMA Expr
		|
		(SingleActParam) Expr
		; 
					
Designator ::= (MultipleDesignIdent) Designator DOT IDENT
			|
			(MultipleDesignExpr) Designator LSQUARE Expr RSQUARE
			|
			(SingleDesignIdent) IDENT;

Type ::= (Type) IDENT;	

Label ::= (Label) IDENT;

Assignop ::= (Assignop) EQUAL;

Relop ::= (IsEqual) IS_EQUAL
		|
		(NotEqual) NOT_EQUAL
		|
		(Greater) GREATER
		|
		(GreaterEqual) GREATER_EQUAL
		|
		(Less) LESS
		|
		(LessEqual) LESS_EQUAL
		;

Addop ::= (Plus) PLUS
		|
		(Minus) MINUS
		;

Mulop ::= (Asterisk) ASTERISK
		|
		(Slash) SLASH
		|
		(Percent) PERCENT
		;


