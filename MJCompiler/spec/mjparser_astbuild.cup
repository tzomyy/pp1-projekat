

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, NEW, ELSE, IF, DOT, LCURLY;
terminal ASSIGN, MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, PRINT, FOREACH, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT;
terminal Character CHAR;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal String IDENT;



nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal Declaration Declaration;
nonterminal VarDecl VarDecl;
nonterminal ConstDecl ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal SingleConstDecl SingleConstDecl;
nonterminal MultipleConstDecl MultipleConstDecl;

nonterminal Brackets Brackets;
nonterminal VarDeclarations VarDeclarations;
nonterminal MoreVarDecl MoreVarDecl;
nonterminal EndOfVarDecl EndOfVarDecl;

nonterminal ClassDecl ClassDecl;
nonterminal ClassConstrMethod ClassConstrMethod;
nonterminal ClassMethod ClassMethod;
nonterminal ClassConstr ClassConstr;
nonterminal ClassVarDecl ClassVarDecl;
nonterminal ClassExtends ClassExtends;

nonterminal ConstructorDecl ConstructorDecl;
nonterminal ConstructorFormPars ConstructorFormPars;
nonterminal ConstructorVarDecl ConstructorVarDecl;
nonterminal ConstructorStatement ConstructorStatement;

nonterminal MethodDecl MethodDecl;
nonterminal MethodFormPars MethodFormPars;
nonterminal MethodStatement MethodStatement;
nonterminal MethodVarDecl MethodVarDecl;
nonterminal MultipleMethodDecl MultipleMethodDecl;

nonterminal FormPars FormPars;
nonterminal SingleFormPar SingleFormPar;
nonterminal MultipleFormPar MultipleFormPar;

nonterminal Statement Statement;
nonterminal StmtConst StmtConst;
nonterminal IfStatement IfStatement;
nonterminal ElseStatement ElseStatement;
nonterminal StatementList StatementList;

nonterminal Expr Expr;
nonterminal Term Term;
nonterminal Factor Factor;
nonterminal FactParam FactParam;

nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignArray DesignArray;
nonterminal DesignOptional DesignOptional;
nonterminal ActPars ActPars;

nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;

nonterminal Designator Designator;

nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal End End;

precedence left ELSE;

Program ::= (Program) ProgName:p Declaration:D1 LCURLY MultipleMethodDecl:M2 RCURLY {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) PROG IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

Declaration ::= (ConstDeclaration) Declaration:D1 ConstDecl:C2 {: RESULT=new ConstDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(VarDeclaration) Declaration:D1 VarDecl:V2 {: RESULT=new VarDeclaration(D1, V2); RESULT.setLine(D1left); :}
			|
			(ClassDeclaration) Declaration:D1 ClassDecl:C2 {: RESULT=new ClassDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(NoDeclaration) {: RESULT=new NoDeclaration(); :} /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl:S1 MultipleConstDecl:M2 SEMICOLON {: RESULT=new ConstDecl(constType, S1, M2); RESULT.setLine(constTypeleft); :};

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst {: RESULT=new BoolConstDecl(constName, booleanConst); RESULT.setLine(constNameleft); :}
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst {: RESULT=new IntegerConstDecl(constName, numberConst); RESULT.setLine(constNameleft); :}
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst {: RESULT=new CharConstDecl(constName, charConst); RESULT.setLine(constNameleft); :}
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl:M1 COMMA SingleConstDecl:S2 {: RESULT=new MultipleConstDecls(M1, S2); RESULT.setLine(M1left); :}
					|
					(EndOfDeclaration) {: RESULT=new EndOfDeclaration(); :} /* epsilon */
					;					

VarDecl ::= (VarDecls) Type:typeVar VarDeclarations:V1 {: RESULT=new VarDecls(typeVar, V1); RESULT.setLine(typeVarleft); :}
			;

VarDeclarations ::= (MultipleVarDecl) MoreVarDecl:M1 VarDeclarations:V2 {: RESULT=new MultipleVarDecl(M1, V2); RESULT.setLine(M1left); :}
				|
				(EndOfVarDeclarations) EndOfVarDecl:E1 {: RESULT=new EndOfVarDeclarations(E1); RESULT.setLine(E1left); :}
				;
				
MoreVarDecl ::= (MoreVarDecls) IDENT:varName Brackets:B1 COMMA {: RESULT=new MoreVarDecls(varName, B1); RESULT.setLine(varNameleft); :}
			|
			(ErrorMoreVarDecl) error COMMA:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do , u liniji  " + lleft, null); :} {: RESULT=new ErrorMoreVarDecl(); :}
			;

EndOfVarDecl ::= (EndOfVarDeclar) IDENT:varName Brackets:B1 SEMICOLON {: RESULT=new EndOfVarDeclar(varName, B1); RESULT.setLine(varNameleft); :}
			|
			(ErrorEndOfVarDecl) error SEMICOLON:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do ; u liniji " + lleft, null); :} {: RESULT=new ErrorEndOfVarDecl(); :}
			;

Brackets ::= (Brackets) LSQUARE RSQUARE {: RESULT=new Brackets(); :}
			|
			(NoBrackets) {: RESULT=new NoBrackets(); :} /*epsilon*/
			;
							

ClassDecl ::= (ClassDecl) CLASS IDENT:I1 ClassExtends:C2 ClassVarDecl:C3 ClassConstrMethod:C4 RCURLY {: RESULT=new ClassDecl(I1, C2, C3, C4); RESULT.setLine(I1left); :};

ClassConstrMethod ::= (ClassOnlyCurly) LCURLY RCURLY {: RESULT=new ClassOnlyCurly(); :}
					|
					(ClassConstrCurly) LCURLY ClassConstr:C1 RCURLY {: RESULT=new ClassConstrCurly(C1); RESULT.setLine(C1left); :}
					|
					(ClassMethodCurly) LCURLY ClassMethod:C1 RCURLY {: RESULT=new ClassMethodCurly(C1); RESULT.setLine(C1left); :}
					|
					(ClassConstrMethodCurly) LCURLY ClassConstr:C1 ClassMethod:C2 RCURLY {: RESULT=new ClassConstrMethodCurly(C1, C2); RESULT.setLine(C1left); :}
					|
					(NoClassConstrMethodCurly) {: RESULT=new NoClassConstrMethodCurly(); :} /* epsilon */
					;
					
End ::= (End) {: RESULT=new End(); :} /* epsilon */ ;

ClassMethod ::= (MultipleClassMethod) ClassMethod:C1 MethodDecl:M2 {: RESULT=new MultipleClassMethod(C1, M2); RESULT.setLine(C1left); :}
			|
			(EndOfClassMethod) MethodDecl:M1 {: RESULT=new EndOfClassMethod(M1); RESULT.setLine(M1left); :}
			;
					
ClassConstr ::= (MultipleClassConstr) ClassConstr:C1 ConstructorDecl:C2 {: RESULT=new MultipleClassConstr(C1, C2); RESULT.setLine(C1left); :}
				|
				(EndOfClassConstrDecl) ConstructorDecl:C1 {: RESULT=new EndOfClassConstrDecl(C1); RESULT.setLine(C1left); :}
				;

ClassVarDecl ::= (MultipleClassVarDecl) ClassVarDecl:C1 VarDecl:V2 {: RESULT=new MultipleClassVarDecl(C1, V2); RESULT.setLine(C1left); :}
				|
				(EndOfClassVarDecl) {: RESULT=new EndOfClassVarDecl(); :} /* epsilon*/
				;

ClassExtends ::= (ClassExtend) EXTENDS Type:T1 LCURLY {: RESULT=new ClassExtend(T1); RESULT.setLine(T1left); :} 
				|
				(NoClassExtend)  LCURLY {: RESULT=new NoClassExtend(); :} 
				|
				(ErrorClassExtend) error:l LCURLY
				{: parser.report_error("Izvrsen oporavak kod prosirenja natklase do { u liniji " + lleft, null); :} {: RESULT=new ErrorClassExtend(); :}
				;

ConstructorDecl ::= (ConstructorDecl) IDENT:I1 LPAREN ConstructorFormPars:C2 ConstructorVarDecl:C3 LCURLY ConstructorStatement:C4 RCURLY {: RESULT=new ConstructorDecl(I1, C2, C3, C4); RESULT.setLine(I1left); :};

ConstructorFormPars ::= (ConstrFormParams) FormPars:F1 RPAREN {: RESULT=new ConstrFormParams(F1); RESULT.setLine(F1left); :}
				|
				(NoConstrFormParams) RPAREN {: RESULT=new NoConstrFormParams(); :} 
				|
				(ErrorConstrFormParams) error RPAREN:l 
				{: parser.report_error("Izvrsen oporavak kod formalnog parametra do ) u liniji " + lleft, null); :} {: RESULT=new ErrorConstrFormParams(); :}
				;
				
ConstructorVarDecl ::= (ConstrVarDecls) MethodVarDecl:M1 VarDecl:V2 {: RESULT=new ConstrVarDecls(M1, V2); RESULT.setLine(M1left); :}
				|
				(EndOfConstrVarDecl) {: RESULT=new EndOfConstrVarDecl(); :} /*epsilon*/
				;
				
ConstructorStatement ::= (ConstrMultipleStmt) ConstructorStatement:C1 Statement:S2 {: RESULT=new ConstrMultipleStmt(C1, S2); RESULT.setLine(C1left); :}
					|
					(EndOfConstrStmt) {: RESULT=new EndOfConstrStmt(); :} /* epsilon */;


MultipleMethodDecl ::= (MethodDecls) MultipleMethodDecl:M1 MethodDecl:M2 {: RESULT=new MethodDecls(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /*epsilon*/
				;

MethodDecl ::= (TypeMethodDecl) Type:methodType IDENT:methodName LPAREN MethodFormPars:M1 MethodVarDecl:M2 LCURLY MethodStatement:M3 RCURLY {: RESULT=new TypeMethodDecl(methodType, methodName, M1, M2, M3); RESULT.setLine(methodTypeleft); :}
					|
					(VoidMethodDecl) VOID IDENT:methodName LPAREN MethodFormPars:M1 MethodVarDecl:M2 LCURLY MethodStatement:M3 RCURLY {: RESULT=new VoidMethodDecl(methodName, M1, M2, M3); RESULT.setLine(methodNameleft); :}
					;
					
MethodFormPars ::= (MethodFormParams) FormPars:F1 RPAREN {: RESULT=new MethodFormParams(F1); RESULT.setLine(F1left); :}
				|
				(NoMethodFormParams) RPAREN {: RESULT=new NoMethodFormParams(); :}
				|
				(ErrorMethodFormParams) error RPAREN:l
				{: parser.report_error("Izvrsen oporavak kod formalnog do ) u liniji " + lleft, null); :} {: RESULT=new ErrorMethodFormParams(); :}
				;
				
MethodVarDecl ::= (MethodVarDecls) MethodVarDecl:M1 VarDecl:V2 {: RESULT=new MethodVarDecls(M1, V2); RESULT.setLine(M1left); :}
				|
				(EndOfMethodVarDecl) {: RESULT=new EndOfMethodVarDecl(); :} /*epsilon*/
				;
				
MethodStatement ::= (MethodStmt) MethodStatement:M1 Statement:S2 {: RESULT=new MethodStmt(M1, S2); RESULT.setLine(M1left); :}
				|
				(NoMethodStmt) {: RESULT=new NoMethodStmt(); :} /* epsilon */
				;

FormPars ::= (FormPars) MultipleFormPar:M1 {: RESULT=new FormPars(M1); RESULT.setLine(M1left); :};

SingleFormPar ::= (SingleFormParam) Type:formType IDENT:formName Brackets:B1 {: RESULT=new SingleFormParam(formType, formName, B1); RESULT.setLine(formTypeleft); :};

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar:M1 COMMA SingleFormPar:S2 {: RESULT=new MultipleFormPars(M1, S2); RESULT.setLine(M1left); :}
				|
				(EndOfFormPar) SingleFormPar:S1 {: RESULT=new EndOfFormPar(S1); RESULT.setLine(S1left); :}
				|
				(ErrorFormComma) error:l {: parser.report_error("Izvrsen oporavak kod formalnog paramtera do , u liniji " + lleft, null); :} COMMA SingleFormPar:S1 {: RESULT=new ErrorFormComma(S1); RESULT.setLine(S1left); :}
				;
				
Statement ::= (DesignStmt) DesignatorStatement:D1 {: RESULT=new DesignStmt(D1); RESULT.setLine(D1left); :}
			|
			(IfStmt) IfStatement:I1 Statement:S2 ElseStatement:E3 {: RESULT=new IfStmt(I1, S2, E3); RESULT.setLine(I1left); :}
			|
			(WhileStmt) WHILE LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new WhileStmt(C1, S2); RESULT.setLine(C1left); :}
			|
			(BreakStmt) BREAK SEMICOLON {: RESULT=new BreakStmt(); :}
			|
			(ContinueStmt) CONTINUE SEMICOLON {: RESULT=new ContinueStmt(); :}
			|
			(ReturnNoExpr) RETURN SEMICOLON {: RESULT=new ReturnNoExpr(); :}
			|
			(ReturnExpr) RETURN Expr:E1 SEMICOLON {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
			|
			(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			|
			(PrintStmt) PRINT LPAREN Expr:E1 StmtConst:S2 RPAREN SEMICOLON {: RESULT=new PrintStmt(E1, S2); RESULT.setLine(E1left); :}
			|
			(ForeachStmt) Designator:D1 DOT FOREACH LPAREN IDENT:I2 ASSIGN Statement:S3 RPAREN SEMICOLON {: RESULT=new ForeachStmt(D1, I2, S3); RESULT.setLine(D1left); :}
			|
			(ListStmts) LCURLY StatementList:S1 RCURLY {: RESULT=new ListStmts(S1); RESULT.setLine(S1left); :}
			;
			
IfStatement ::= (IfState) IF LPAREN Condition:C1 RPAREN {: RESULT=new IfState(C1); RESULT.setLine(C1left); :}
			|
			(ErrorStmt) error RPAREN:l
			{: parser.report_error("Izvrsen oporavak kod if konstrukcije do ; u liniji " + lleft, null); :} {: RESULT=new ErrorStmt(); :}
			;
			
StatementList ::= (MoreStatements) StatementList:S1 Statement:S2 {: RESULT=new MoreStatements(S1, S2); RESULT.setLine(S1left); :}
				|
				(EndOfStatements) {: RESULT=new EndOfStatements(); :} /* epsilon */
				;
			
StmtConst ::= (StmtCnst) COMMA NUMBER:N1 {: RESULT=new StmtCnst(N1); RESULT.setLine(N1left); :}
			|
			(NoStmtCnst) {: RESULT=new NoStmtCnst(); :} /* epsilon */
			;
			
ElseStatement ::= (ElseStmt) ELSE Statement:S1 {: RESULT=new ElseStmt(S1); RESULT.setLine(S1left); :}
				|
				(NoElseStmt) {: RESULT=new NoElseStmt(); :} /* epsilon */
				;

Expr ::= (NegativeExpr) MINUS Term:T1 {: RESULT=new NegativeExpr(T1); RESULT.setLine(T1left); :}
		|
		(MultipleExpr) Expr:E1 Addop:A2 Term:T3 {: RESULT=new MultipleExpr(E1, A2, T3); RESULT.setLine(E1left); :}
		|
		(SingleExpr) Term:T1 {: RESULT=new SingleExpr(T1); RESULT.setLine(T1left); :}
		;
		
Term ::= (SingleTerm) Factor:F1 {: RESULT=new SingleTerm(F1); RESULT.setLine(F1left); :}
		|
		(MultipleTerms) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MultipleTerms(T1, M2, F3); RESULT.setLine(T1left); :}
		;

Factor ::= (FactVar) Designator:D1 {: RESULT=new FactVar(D1); RESULT.setLine(D1left); :}
		|
		(FactFunc) Designator:D1 LPAREN FactParam:F2 RPAREN {: RESULT=new FactFunc(D1, F2); RESULT.setLine(D1left); :} 
		|
		(FactNum) NUMBER:N1 {: RESULT=new FactNum(N1); RESULT.setLine(N1left); :}
		|
		(FactChar) CHAR:C1 {: RESULT=new FactChar(C1); RESULT.setLine(C1left); :}
		|
		(FactBoolean) BOOL:B1 {: RESULT=new FactBoolean(B1); RESULT.setLine(B1left); :}
		|
		(FactConstrArray) NEW Type:arrayType LSQUARE Expr:E1 RSQUARE {: RESULT=new FactConstrArray(arrayType, E1); RESULT.setLine(arrayTypeleft); :}
		|
		(FactConstrObject) NEW Type:objectType LPAREN FactParam:F1 RPAREN {: RESULT=new FactConstrObject(objectType, F1); RESULT.setLine(objectTypeleft); :}
		|
		(FactExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactExpr(E1); RESULT.setLine(E1left); :}
		;
		
FactParam ::= (FactFuncParams) ActPars:A1 {: RESULT=new FactFuncParams(A1); RESULT.setLine(A1left); :}
				|
				(NoFactFuncParams) {: RESULT=new NoFactFuncParams(); :} /* epsilon */
				;
		
DesignatorStatement ::= (DesignAssign) Designator:D1 Assignop:A2 Expr:E3 SEMICOLON {: RESULT=new DesignAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesignFunction) Designator:D1 LPAREN FactParam:F2 RPAREN SEMICOLON {: RESULT=new DesignFunction(D1, F2); RESULT.setLine(D1left); :}
					|
					(DesignInc) Designator:D1 INCREMENT SEMICOLON {: RESULT=new DesignInc(D1); RESULT.setLine(D1left); :}
					|
					(DesignDec) Designator:D1 DECREMENT SEMICOLON {: RESULT=new DesignDec(D1); RESULT.setLine(D1left); :}
					|
					(DesignAssignArray) LSQUARE DesignArray:D1 RSQUARE EQUAL Designator:D2 SEMICOLON {: RESULT=new DesignAssignArray(D1, D2); RESULT.setLine(D1left); :}
					|
					(DesignError) error SEMICOLON:l
					{: parser.report_error("Izvrsen oporavak kod dodeljivanja vrednosti do ; u liniji " + lleft, null); :} {: RESULT=new DesignError(); :}
					;
					
DesignArray ::= (MultipleDesignators) DesignArray:D1 COMMA DesignOptional:D2 {: RESULT=new MultipleDesignators(D1, D2); RESULT.setLine(D1left); :} 
			|
			(SingleDesignators) DesignOptional:D1 {: RESULT=new SingleDesignators(D1); RESULT.setLine(D1left); :}
			;
			
DesignOptional ::= (HasDesignator) Designator:D1 {: RESULT=new HasDesignator(D1); RESULT.setLine(D1left); :}
				|
				(NoDesignator) {: RESULT=new NoDesignator(); :} /* epsilon */
				;
				
ActPars ::= (ActParams) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParams(A1, E2); RESULT.setLine(A1left); :}
		|
		(SingleActParam) Expr:E1 {: RESULT=new SingleActParam(E1); RESULT.setLine(E1left); :}
		; 
		
Condition ::= (Conditions) CondTerm:C1 OR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :}
			|
			(SingleCondition) CondTerm:C1 {: RESULT=new SingleCondition(C1); RESULT.setLine(C1left); :}
			;
				
CondTerm ::= (CondTerms) CondFact:C1 AND CondFact:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			|
			(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
			;
				
CondFact ::= (CondFacts) CondFact:C1 Relop:R2 Expr:E3 {: RESULT=new CondFacts(C1, R2, E3); RESULT.setLine(C1left); :}
		|
		(SingleCondFact) Expr:E1 {: RESULT=new SingleCondFact(E1); RESULT.setLine(E1left); :}
		;
					
Designator ::= (MultipleDesignIdent) Designator:D1 DOT IDENT:I2 {: RESULT=new MultipleDesignIdent(D1, I2); RESULT.setLine(D1left); :}
			|
			(MultipleDesignExpr) Designator:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new MultipleDesignExpr(D1, E2); RESULT.setLine(D1left); :}
			|
			(SingleDesignIdent) IDENT:I1 {: RESULT=new SingleDesignIdent(I1); RESULT.setLine(I1left); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};	

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

Relop ::= (IsEqual) IS_EQUAL {: RESULT=new IsEqual(); :}
		|
		(NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		|
		(Greater) GREATER {: RESULT=new Greater(); :}
		|
		(GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
		|
		(Less) LESS {: RESULT=new Less(); :}
		|
		(LessEqual) LESS_EQUAL {: RESULT=new LessEqual(); :}
		;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
		|
		(Minus) MINUS {: RESULT=new Minus(); :}
		;

Mulop ::= (Asterisk) ASTERISK {: RESULT=new Asterisk(); :}
		|
		(Slash) SLASH {: RESULT=new Slash(); :}
		|
		(Percent) PERCENT {: RESULT=new Percent(); :}
		;


