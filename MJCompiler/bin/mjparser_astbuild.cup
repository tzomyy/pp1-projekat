

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, BOOL, NEW, ELSE, IF, DOT, LCURLY;
terminal ASSIGN, MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, CHAR, PRINT, FOREACH, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program Program;
nonterminal Declaration Declaration;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal Type Type;
nonterminal SingleConstDecl SingleConstDecl;
nonterminal MultipleConstDecl MultipleConstDecl;
nonterminal SingleVarDecl SingleVarDecl;
nonterminal Brackets Brackets;
nonterminal MultipleVarDecl MultipleVarDecl;

nonterminal MethodDecl MethodDecl;
nonterminal MethodFormPars MethodFormPars;
nonterminal MethodStatement MethodStatement;
nonterminal MultipleMethodDecl MultipleMethodDecl;

nonterminal FormPars FormPars;
nonterminal SingleFormPar SingleFormPar;
nonterminal MultipleFormPar MultipleFormPar;

nonterminal Statement Statement;
nonterminal Designator Designator;

nonterminal Label Label;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;


Program ::= (Program) PROG IDENT:I1 Declaration:D2 LCURLY MethodDecl:M3 RCURLY {: RESULT=new Program(I1, D2, M3); RESULT.setLine(I1left); :};

Declaration ::= (ConstDeclaration) Declaration:D1 ConstDecl:C2 {: RESULT=new ConstDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(VarDeclaration) Declaration:D1 VarDecl:V2 {: RESULT=new VarDeclaration(D1, V2); RESULT.setLine(D1left); :}
			|
			(ClassDeclaration) Declaration:D1 ClassDecl:C2 {: RESULT=new ClassDeclaration(D1, C2); RESULT.setLine(D1left); :}
			|
			(NoDeclaration) {: RESULT=new NoDeclaration(); :} /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl:S1 MultipleConstDecl:M2 SEMICOLON {: RESULT=new ConstDecl(constType, S1, M2); RESULT.setLine(constTypeleft); :};

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst {: RESULT=new BoolConstDecl(constName); RESULT.setLine(constNameleft); :}
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst {: RESULT=new IntegerConstDecl(constName, numberConst); RESULT.setLine(constNameleft); :}
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst {: RESULT=new CharConstDecl(constName); RESULT.setLine(constNameleft); :}
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl:M1 COMMA SingleConstDecl:S2 {: RESULT=new MultipleConstDecls(M1, S2); RESULT.setLine(M1left); :}
					|
					(EndOfDeclaration) {: RESULT=new EndOfDeclaration(); :} /* epsilon */
					;					

VarDecl ::= (VarDecl) Type:varName SingleVarDecl:S1 MultipleVarDecl:M2 SEMICOLON {: RESULT=new VarDecl(varName, S1, M2); RESULT.setLine(varNameleft); :};

SingleVarDecl ::= (SingleVarDecl) IDENT:varName Brackets:B1 {: RESULT=new SingleVarDecl(varName, B1); RESULT.setLine(varNameleft); :};

Brackets ::= (Brackets) LSQUARE RSQUARE {: RESULT=new Brackets(); :}
			|
			(NoBrackets) {: RESULT=new NoBrackets(); :} /*epsilon*/
			;
			
MultipleVarDecl ::= (MultipleVarDecls) MultipleVarDecl:M1 COMMA SingleVarDecl:S2 {: RESULT=new MultipleVarDecls(M1, S2); RESULT.setLine(M1left); :}
				|
				(EndOfVarDeclaration) {: RESULT=new EndOfVarDeclaration(); :} /* epsilon */
				;
				
ClassDecl ::= (ClassDecl) AND {: RESULT=new ClassDecl(); :};

MethodDecl ::= (MethodDecls) MethodDecl:M1 MultipleMethodDecl:M2 {: RESULT=new MethodDecls(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /*epsilon*/
				;

MultipleMethodDecl ::= (TypeMethodDecl) Type:methodType IDENT:methodName LPAREN MethodFormPars:M1 RPAREN VarDecl:V2 LCURLY MethodStatement:M3 RCURLY {: RESULT=new TypeMethodDecl(methodType, methodName, M1, V2, M3); RESULT.setLine(methodTypeleft); :}
					|
					(VoidMethodDecl) VOID IDENT:methodName LPAREN MethodFormPars:M1 RPAREN VarDecl:V2 LCURLY MethodStatement:M3 RCURLY {: RESULT=new VoidMethodDecl(methodName, M1, V2, M3); RESULT.setLine(methodNameleft); :};
					
MethodFormPars ::= (MethodFormParams) FormPars:F1 {: RESULT=new MethodFormParams(F1); RESULT.setLine(F1left); :}
				|
				(NoMethodFormParams) {: RESULT=new NoMethodFormParams(); :} /* epsilon */
				;
				
MethodStatement ::= (MethodStmt) Statement:S1 {: RESULT=new MethodStmt(S1); RESULT.setLine(S1left); :}
				|
				(NoMethodStmt) {: RESULT=new NoMethodStmt(); :} /* epsilon */
				;

FormPars ::= (FormPars) SingleFormPar:S1 MultipleFormPar:M2 {: RESULT=new FormPars(S1, M2); RESULT.setLine(S1left); :};

SingleFormPar ::= (SingleFormParam) Type:formType IDENT:formName Brackets:B1 {: RESULT=new SingleFormParam(formType, formName, B1); RESULT.setLine(formTypeleft); :};

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar:M1 COMMA SingleFormPar:S2 {: RESULT=new MultipleFormPars(M1, S2); RESULT.setLine(M1left); :}
				|
				(EndOfFormPar) {: RESULT=new EndOfFormPar(); :} /*epsilon*/
				;
				
Statement ::= (DesignStmt) Designator:D1 {: RESULT=new DesignStmt(D1); RESULT.setLine(D1left); :};
					
Designator ::= (MultipleDesignator) Designator:D1 DOT IDENT:I2 {: RESULT=new MultipleDesignator(D1, I2); RESULT.setLine(D1left); :}
			|
			(SingleDesignator) IDENT:I1 {: RESULT=new SingleDesignator(I1); RESULT.setLine(I1left); :}
			;

Type ::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};	

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

Relop ::= (IsEqual) IS_EQUAL {: RESULT=new IsEqual(); :}
		|
		(NotEqual) NOT_EQUAL {: RESULT=new NotEqual(); :}
		|
		(Greater) GREATER {: RESULT=new Greater(); :}
		|
		(GreaterEqual) GREATER_EQUAL {: RESULT=new GreaterEqual(); :}
		|
		(Less) LESS {: RESULT=new Less(); :}
		|
		(LessEqual) LESS_EQUAL {: RESULT=new LessEqual(); :}
		;

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
		|
		(Minus) MINUS {: RESULT=new Minus(); :}
		;

Mulop ::= (Asterisk) ASTERISK {: RESULT=new Asterisk(); :}
		|
		(Slash) SLASH {: RESULT=new Slash(); :}
		|
		(Percent) PERCENT {: RESULT=new Percent(); :}
		;


