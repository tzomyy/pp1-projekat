

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, BOOL, NEW, ELSE, IF, DOT, LCURLY;
terminal ASSIGN, MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, CHAR, PRINT, FOREACH, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT;
terminal Integer NUMBER;
terminal String IDENT;

nonterminal Program, Declaration, ConstDecl, VarDecl, ClassDecl;
nonterminal Type;
nonterminal SingleConstDecl;
nonterminal MultipleConstDecl;
nonterminal SingleVarDecl;
nonterminal Brackets;
nonterminal MultipleVarDecl;

nonterminal MethodDeclList;
nonterminal SingleMethodDecl;
nonterminal MultipleMethodDecl;

nonterminal FormPars;
nonterminal SingleFormPar;
nonterminal MultipleFormPar;

nonterminal Mulop;


Program ::= (Program) PROG IDENT Declaration LCURLY MethodDeclList RCURLY;

Declaration ::= (ConstDeclaration) Declaration ConstDecl
			|
			(VarDeclaration) Declaration VarDecl
			|
			(ClassDeclaration) Declaration ClassDecl
			|
			(NoDeclaration) /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl MultipleConstDecl SEMICOLON;

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl COMMA SingleConstDecl
					|
					(EndOfDeclaration) /* epsilon */
					;					

VarDecl ::= (VarDecl) Type:varName SingleVarDecl MultipleVarDecl SEMICOLON;

SingleVarDecl ::= (SingleVarDecl) IDENT:varName Brackets;

Brackets ::= (Brackets) LSQUARE RSQUARE
			|
			(NoBrackets) /*epsilon*/
			;
			
MultipleVarDecl ::= (MultipleVarDecls) MultipleVarDecl COMMA SingleVarDecl
				|
				(EndOfVarDeclaration) /* epsilon */
				;
				
ClassDecl ::= (ClassDecl) AND;

MethodDeclList ::= (MethodDeclLists) SingleMethodDecl MultipleMethodDecl
				|
				(NoMethodDeclList) /*epsilon*/
				;

SingleMethodDecl ::= (SingleMethodDecl) Mulop;

MultipleMethodDecl ::= (MultipleMethodDecls) MultipleMethodDecl SingleMethodDecl
					|
					(EndOfMethodDecl) /* epsilon */
					;

FormPars ::= (FormPars) SingleFormPar MultipleFormPar;

SingleFormPar ::= (SingleFormPar) Type:formType IDENT:formName Brackets;

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar COMMA SingleFormPar
				|
				(EndOfMultipleFormPar) /*epsilon*/
				;

Type ::= (Type) IDENT;

Mulop ::= (Asterisk) ASTERISK
		|
		(Slash) SLASH
		|
		(Percent) PERCENT;


