

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal COLON, PLUS, RPAREN, COMMA, SEMICOLON, EXTENDS, NEW, ELSE, IF, DOT, LCURLY;
terminal MINUS, NOT_EQUAL, VOID, AND, LPAREN, EQUAL, LESS, LSQUARE;
terminal IS_EQUAL, BREAK, READ, INCREMENT, ASTERISK, GREATER, WHILE, SLASH;
terminal GREATER_EQUAL, LESS_EQUAL, PRINT, RCURLY, CLASS, DECREMENT, PROG;
terminal RSQUARE, RETURN, CONTINUE, OR, CONST, PERCENT, MAP, ASSIGN;
terminal Character CHAR;
terminal Integer NUMBER;
terminal Boolean BOOL;
terminal String IDENT;



nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal Declaration, VarDecl, ConstDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal SingleConstDecl;
nonterminal MultipleConstDecl;

nonterminal Brackets;
nonterminal VarDeclarations;
nonterminal MoreVarDecl;
nonterminal EndOfVarDecl;

nonterminal ClassDecl;
nonterminal ClassName;
nonterminal ClassConstrMethod;
nonterminal ClassMethod;
nonterminal ClassConstr;
nonterminal ClassVarDecl;
nonterminal ClassExtends;

nonterminal ConstructorDecl;
nonterminal ConstructorFormPars;
nonterminal ConstructorVarDecl;
nonterminal ConstructorStatement;

nonterminal MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Struct TypeMethod;
nonterminal rs.etf.pp1.symboltable.concepts.Struct VoidMethod;
nonterminal MethodFormPars;
nonterminal MethodStatement;
nonterminal MethodVarDecl;
nonterminal MultipleMethodDecl;

nonterminal FormPars;
nonterminal SingleFormPar;
nonterminal MultipleFormPar;

nonterminal Statement;
nonterminal MapEnd;
nonterminal WhileStart;
nonterminal WhileEnd;
nonterminal StmtConst;
nonterminal IfStatement;
nonterminal ElseStatement;
nonterminal StatementList;

nonterminal Expr;
nonterminal Term;
nonterminal Factor;
nonterminal FactParam;

nonterminal DesignatorStatement;
nonterminal DesignOptional;
nonterminal ActPars;

nonterminal Condition;
nonterminal CondTerm;
nonterminal CondFact;

nonterminal Designator;

nonterminal Label;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;

nonterminal End;

precedence left ELSE;

Program ::= (Program) ProgName:p Declaration LCURLY MultipleMethodDecl RCURLY;

ProgName ::= (ProgName) PROG IDENT:progName;

Declaration ::= (ConstDeclaration) Declaration ConstDecl
			|
			(VarDeclaration) Declaration VarDecl
			|
			(ClassDeclaration) Declaration ClassDecl
			|
			(NoDeclaration) /* epsilon */
			;
		
ConstDecl ::= (ConstDecl) CONST Type:constType SingleConstDecl MultipleConstDecl SEMICOLON;

SingleConstDecl ::= (BoolConstDecl) IDENT:constName EQUAL BOOL:booleanConst
				|
				(IntegerConstDecl) IDENT:constName EQUAL NUMBER:numberConst
				|
				(CharConstDecl) IDENT:constName EQUAL CHAR:charConst
				;
				
MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl COMMA SingleConstDecl
					|
					(EndOfDeclaration) /* epsilon */
					;					

VarDecl ::= (VarDecls) Type:typeVar VarDeclarations
			;

VarDeclarations ::= (MultipleVarDecl) MoreVarDecl VarDeclarations
				|
				(EndOfVarDeclarations) EndOfVarDecl
				;
				
MoreVarDecl ::= (MoreVarDecls) IDENT:varName Brackets COMMA
			|
			(ErrorMoreVarDecl) error COMMA:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do , u liniji  " + lleft, null); :}
			;

EndOfVarDecl ::= (EndOfVarDeclar) IDENT:varName Brackets SEMICOLON
			|
			(ErrorEndOfVarDecl) error SEMICOLON:l
			{: parser.report_error("Izvrsen oporavak kod dodeljivanja globalne promenljive do ; u liniji " + lleft, null); :}
			;

Brackets ::= (MatrixBrackets) LSQUARE RSQUARE LSQUARE RSQUARE
			|
			(ArrayBrackets) LSQUARE RSQUARE
			|
			(NoBrackets) /*epsilon*/
			;
							

ClassDecl ::= (ClassDecl) CLASS ClassName ClassExtends ClassVarDecl ClassConstrMethod RCURLY;

ClassName ::= (ClassName) IDENT:className;

ClassConstrMethod ::= (ClassOnlyCurly) LCURLY RCURLY
					|
					(ClassConstrCurly) LCURLY ClassConstr RCURLY
					|
					(ClassMethodCurly) LCURLY ClassMethod RCURLY
					|
					(ClassConstrMethodCurly) LCURLY ClassConstr ClassMethod RCURLY
					|
					(NoClassConstrMethodCurly) /* epsilon */
					;
					
End ::= (End) /* epsilon */ ;

ClassMethod ::= (MultipleClassMethod) ClassMethod MethodDecl
			|
			(EndOfClassMethod) MethodDecl
			;
					
ClassConstr ::= (MultipleClassConstr) ClassConstr ConstructorDecl
				|
				(EndOfClassConstrDecl) ConstructorDecl
				;

ClassVarDecl ::= (MultipleClassVarDecl) ClassVarDecl VarDecl
				|
				(EndOfClassVarDecl) /* epsilon*/
				;

ClassExtends ::= (ClassExtend) EXTENDS Type LCURLY 
				|
				(NoClassExtend)  LCURLY 
				|
				(ErrorClassExtend) error:l LCURLY
				{: parser.report_error("Izvrsen oporavak kod prosirenja natklase do { u liniji " + lleft, null); :}
				;

ConstructorDecl ::= (ConstructorDecl) IDENT LPAREN ConstructorFormPars ConstructorVarDecl LCURLY ConstructorStatement RCURLY;

ConstructorFormPars ::= (ConstrFormParams) FormPars RPAREN
				|
				(NoConstrFormParams) RPAREN 
				|
				(ErrorConstrFormParams) error RPAREN:l 
				{: parser.report_error("Izvrsen oporavak kod formalnog parametra do ) u liniji " + lleft, null); :}
				;
				
ConstructorVarDecl ::= (ConstrVarDecls) MethodVarDecl VarDecl
				|
				(EndOfConstrVarDecl) /*epsilon*/
				;
				
ConstructorStatement ::= (ConstrMultipleStmt) ConstructorStatement Statement
					|
					(EndOfConstrStmt) /* epsilon */;


MultipleMethodDecl ::= (MethodDecls) MultipleMethodDecl MethodDecl
				|
				(NoMethodDeclList) /*epsilon*/
				;

MethodDecl ::= (TypeMethodDecl) TypeMethod LPAREN MethodFormPars MethodVarDecl LCURLY MethodStatement RCURLY
					|
					(VoidMethodDecl) VoidMethod LPAREN MethodFormPars MethodVarDecl LCURLY MethodStatement RCURLY
					;
					
TypeMethod ::= (TypeMethod) Type:methodType IDENT:methodName;

VoidMethod ::= (VoidMethod) VOID IDENT:methodName;
					
MethodFormPars ::= (MethodFormParams) FormPars RPAREN
				|
				(NoMethodFormParams) RPAREN
				|
				(ErrorMethodFormParams) error RPAREN:l
				{: parser.report_error("Izvrsen oporavak kod formalnog do ) u liniji " + lleft, null); :}
				;
				
MethodVarDecl ::= (MethodVarDecls) MethodVarDecl VarDecl
				|
				(EndOfMethodVarDecl) /*epsilon*/
				;
				
MethodStatement ::= (MethodStmt) MethodStatement Statement
				|
				(NoMethodStmt) /* epsilon */
				;

FormPars ::= (FormPars) MultipleFormPar;

SingleFormPar ::= (SingleFormParam) Type:formType IDENT:formName Brackets;

MultipleFormPar ::= (MultipleFormPars) MultipleFormPar COMMA SingleFormPar
				|
				(EndOfFormPar) SingleFormPar
				|
				(ErrorFormComma) error:l {: parser.report_error("Izvrsen oporavak kod formalnog paramtera do , u liniji " + lleft, null); :} COMMA SingleFormPar
				;
				
Statement ::= (DesignStmt) DesignatorStatement
			|
			(IfStmt) IfStatement Statement ElseStatement
			|
			(WhileStmt) WhileStart LPAREN Condition RPAREN Statement WhileEnd
			|
			(BreakStmt) BREAK SEMICOLON
			|
			(ContinueStmt) CONTINUE SEMICOLON
			|
			(ReturnNoExpr) RETURN SEMICOLON
			|
			(ReturnExpr) RETURN Expr SEMICOLON
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMICOLON
			|
			(PrintStmt) PRINT LPAREN Expr StmtConst RPAREN SEMICOLON
			|
			(MapStmt) Designator Assignop Designator DOT MAP LPAREN IDENT ASSIGN Expr RPAREN SEMICOLON MapEnd
			|
			(ListStmts) LCURLY StatementList RCURLY
			;

MapEnd ::= (MapEnd) /* epislon */;		
			
WhileStart ::= (WhileStart) WHILE;

WhileEnd ::= (WhileEnd) /* epsilon */;
			
IfStatement ::= (IfState) IF LPAREN Condition RPAREN
			|
			(ErrorStmt) error RPAREN:l
			{: parser.report_error("Izvrsen oporavak kod if konstrukcije do ; u liniji " + lleft, null); :}
			;
			
StatementList ::= (MoreStatements) StatementList Statement
				|
				(EndOfStatements) /* epsilon */
				;
			
StmtConst ::= (StmtCnst) COMMA NUMBER
			|
			(NoStmtCnst) /* epsilon */
			;
			
ElseStatement ::= (ElseStmt) ELSE Statement
				|
				(NoElseStmt) /* epsilon */
				;

Expr ::= (NegativeExpr) MINUS Term
		|
		(MultipleExpr) Expr Addop Term
		|
		(SingleExpr) Term
		;
		
Term ::= (SingleTerm) Factor
		|
		(MultipleTerms) Term Mulop Factor
		;

Factor ::= (FactVar) Designator
		|
		(FactFunc) Designator LPAREN FactParam RPAREN 
		|
		(FactNum) NUMBER
		|
		(FactChar) CHAR
		|
		(FactBoolean) BOOL
		|
		(FactConstrMatrix) NEW Type:arrayType LSQUARE Expr RSQUARE LSQUARE Expr RSQUARE
		|
		(FactConstrArray) NEW Type:arrayType LSQUARE Expr RSQUARE
		|
		(FactConstrObject) NEW Type:objectType LPAREN FactParam RPAREN
		|
		(FactExpr) LPAREN Expr RPAREN
		;
		
FactParam ::= (FactFuncParams) ActPars
				|
				(NoFactFuncParams) /* epsilon */
				;
		
DesignatorStatement ::= (DesignAssign) Designator Assignop Expr SEMICOLON
					|
					(DesignFunction) Designator LPAREN FactParam RPAREN SEMICOLON
					|
					(DesignInc) Designator INCREMENT SEMICOLON
					|
					(DesignDec) Designator DECREMENT SEMICOLON
					|
					(DesignError) error SEMICOLON:l
					{: parser.report_error("Izvrsen oporavak kod dodeljivanja vrednosti do ; u liniji " + lleft, null); :}
					;
					
			
DesignOptional ::= (HasDesignator) Designator
				|
				(NoDesignator) /* epsilon */
				;
				
ActPars ::= (ActParams) ActPars COMMA Expr
		|
		(SingleActParam) Expr
		; 
		
Condition ::= (Conditions) CondTerm OR CondTerm
			|
			(SingleCondition) CondTerm
			;
				
CondTerm ::= (CondTerms) CondFact AND CondFact
			|
			(SingleCondTerm) CondFact
			;
				
CondFact ::= (CondFacts) CondFact Relop Expr
		|
		(SingleCondFact) Expr
		;
					
Designator ::= (MultipleDesignIdent) Designator DOT IDENT
			|
			(MultipleDesignExpr) Designator LSQUARE Expr RSQUARE
			|
			(SingleDesignIdent) IDENT;

Type ::= (Type) IDENT:typeName;	

Label ::= (Label) IDENT;

Assignop ::= (Assignop) EQUAL;

Relop ::= (IsEqual) IS_EQUAL
		|
		(NotEqual) NOT_EQUAL
		|
		(Greater) GREATER
		|
		(GreaterEqual) GREATER_EQUAL
		|
		(Less) LESS
		|
		(LessEqual) LESS_EQUAL
		;

Addop ::= (Plus) PLUS
		|
		(Minus) MINUS
		;

Mulop ::= (Asterisk) ASTERISK
		|
		(Slash) SLASH
		|
		(Percent) PERCENT
		;


